import * as THREE from "https://threejs.org/build/three.module.js";
import { OrbitControls } from "https://threejs.org/examples/jsm/controls/OrbitControls.js";

var camera, scene, renderer;
var light, light2;
var angle = 0;
var puck, puck2;
var balls = [];

const R = 4;

class Ball{
	constructor(pos, vel, mesh){
    this.pos = pos;
    this.vel = vel;
    this.force = new THREE.Vector3(0,0,0);
    this.mesh = mesh;
    scene.add (this.mesh);
    mesh.material.color = new THREE.Color().setHSL (Math.random(), 0.5, .7);
        
  	/*puckColor = new THREE.MeshBasicMaterial();
    puckColor.color = new THREE.Color().setHSL (173/360,.98,.44);
  	puck = new THREE.Mesh (new THREE.CylinderGeometry(10,10,4,20), puckColor);*/
  }
  update(dt) {
  	this.vel.add (this.force.clone().multiplyScalar (dt));
  	this.pos.add (this.vel.clone().multiplyScalar (dt));
  
    // wall-collision
  if (this.pos.z < -70+R) {
  	 this.vel.z = - this.vel.z;
     
     this.pos.z = -70+R;
  }
   if (this.pos.z > 70+R) {
  	 this.vel.z = - this.vel.z;
     
     this.pos.z = 70+R;
  }
  if (this.pos.x > 70-R) {
  	 this.vel.x = - this.vel.x;
     
     this.pos.x = 70-R;
  }
 if (this.pos.x < -70+R) {
  	 this.vel.x = - this.vel.x;
     
     this.pos.x = -70+R;
  }

	this.mesh.position.copy (this.pos);
   
   }
}
function buildBallMesh (mycolor) {


   
  let ballMesh = new THREE.Mesh (new THREE.CylinderGeometry(10,10,4,20), new THREE.MeshBasicMaterial());
  ballMesh.material.color = mycolor;
  return ballMesh;
}

init();
animate();



function init() {

  scene = new THREE.Scene();

  renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x888888);
  document.body.appendChild(renderer.domElement);

  camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.set (0,400,500);
  let controls = new OrbitControls(camera, renderer.domElement);
	
  ////////////////////////////////////////////////////////////////
  
  let ballMesh = buildBallMesh (new THREE.Color().setHSL (Math.random(), .9, .4));
  
  let ball = new Ball (new THREE.Vector3(2,5,0), new THREE.Vector3(-4,0,5), ballMesh);
	balls.push (ball);

  ballMesh = buildBallMesh (new THREE.Color().setHSL (Math.random(), .9, .4));
  
  let ball2 = new Ball (new THREE.Vector3(0,5,0), new THREE.Vector3(4,0,5), ballMesh);

	balls.push (ball2);



  /////////////////////////////////////////
  var wall = new THREE.Mesh (new THREE.BoxGeometry(200,40, 20), new THREE.MeshBasicMaterial({color:"pink", transparent: true, opacity:0.4}));
  scene.add (wall);
  wall.position.set(0, 20, 90);
  var wall2 = new THREE.Mesh (new THREE.BoxGeometry(200,40, 20), new THREE.MeshBasicMaterial({color:"pink", transparent: true, opacity:0.4}));
  scene.add (wall2);
  wall2.position.set(0, 20, -90);
  var wall3 = new THREE.Mesh (new THREE.BoxGeometry(200,40, 20), new THREE.MeshBasicMaterial({color:"pink", transparent: true, opacity:0.4}));
  scene.add (wall3);
  wall3.position.set(-90, 20, 0);
  wall3.rotation.y = Math.PI/2*3;
  var wall4 = new THREE.Mesh (new THREE.BoxGeometry(200,40, 20), new THREE.MeshBasicMaterial({color:"pink", transparent: true, opacity:0.4}));
  scene.add (wall4);
  wall4.position.set(90, 20, 0);
  wall4.rotation.y = Math.PI/2*3;
  /*var ground = new THREE.Mesh (new THREE.BoxGeometry(125,10, 125), new THREE.MeshBasicMaterial({color:"gray"}));
  scene.add (ground);
  ground.position.set(0, 0, 0);
  ground.rotation.y = Math.PI/2*3;*/
  var floor = new THREE.Mesh (new THREE.PlaneGeometry(200,200), new THREE.MeshPhongMaterial());
  floor.rotation.x = -Math.PI/2;
  scene.add (floor);

  

  ////////////////////////////////////////////////////////
  
/////////////////////////////////////////////
  
}


function animate() {
/////////////////////////////////////////////
 

//////////////////////////////////////////////

  requestAnimationFrame(animate);
  render();
  var dt = 0.1;
  for (let i = 0; i < balls.length; i++){
  	var a=balls[0].pos.x
		if(balls[0].pos){
    
    }
    /*
      if(ball.distanceTo(ball2) < (2*R)){
          ball.pos.x = ball.pos.x-d/2*absX; 
          ball2.pos.x = ball2.pos.x-d/2*absX; 
      }
    */
    
    
  	balls[i].update (dt);
    }

}
console.log(balls[0].pos.x);
console.log(balls[1].pos.x);
function render() {

  renderer.render(scene, camera);

}
